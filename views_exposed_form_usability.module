<?php
/**
 * @file
 * views_exposed_form_usability.module
 */

/**
 * http://cgit.drupalcode.org/sandbox-xandeadx-2160935/tree/helpers/ArrayHelper.inc#n13
 *
 * Return the values from a single column in the input array.
 * @param array $array Source array
 * @param string $column_key Column key name
 * @param string|NULL $index_key Index key name
 * @return array
 */
function views_exposed_form_usability_get_column(array $array, $column_key, $index_key = NULL) {
  $new_array = array();

  foreach ($array as $key => $value) {
    if (is_object($value)) {
      $value = (array)$value;
    }
    if ($index_key !== NULL) {
      $key = $value[$index_key];
    }
    if (isset($value[$column_key])) {
      $new_array[$key] = $value[$column_key];
    }
    else {
      $new_array[$key] = NULL;
    }
  }

  return $new_array;
}

/**
 * Implements hook_preprocess_views_exposed_form().
 */
function views_exposed_form_usability_preprocess_views_exposed_form(&$variables) {
  $variables['content'] = '';

  $info_value = views_exposed_form_usability_get_column($variables['form']['#info'], 'value');

  // first level render
  foreach ($variables['widgets'] as $id => $widget) {
    if (isset($widget->widget)) {
      $variables['content'] .= render($variables['form'][$info_value[$id]]);
    }
  }

  // render button
  $button = '';
  if (isset($variables['form']['submit']['#children'])) {
    if (isset($variables['form']['submit']['#prefix'])) {
      $button .= $variables['form']['submit']['#prefix'];
    }

    $button .= $variables['form']['submit']['#children'];

    if (isset($variables['form']['submit']['#suffix'])) {
      $button .= $variables['form']['submit']['#suffix'];
    }
  }

  // remove button
  $variables['content'] .= preg_replace('/' . preg_quote($button, '/') . '$/', '', $variables['button']);

  // fixed button
  $variables['button'] = $button;

  // sort_by
  if (!empty($variables['sort_by'])) {
    $variables['content'] .= $variables['sort_by'] . $variables['sort_order'];
  }

  // submit
  if (!empty($variables['button'])) {
    $variables['content'] .= $variables['button'];
  }

  // reset
  if (!empty($variables['reset_button'])) {
    $variables['content'] .= $variables['reset_button'];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @form_id
 * views_exposed_form
 */
function views_exposed_form_usability_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  // fixed structure elements
  $filter = function (&$item, $key, $data) {
    if ($key{0} != '#' && is_array($item)) {
      $callback = &$data['callback'];
      $info = &$data['info'];
      $info_key = isset($data['info_key'][$key])? $data['info_key'][$key]: NULL;

      // base label
      if ($info_key) {
        $title = $info[$info_key]['label'];

        if (isset($item['#tree']) && $item['#tree']) {
          $item['value']['#title'] = $title;
        }
        else {
          $item['#title'] = $title;
        }
      }

      // range
      if (!isset($item['#type']) && isset($item['min'], $item['max'])) {
        $id = drupal_html_id("edit-{$info[$info_key]['value']}-wrapper");
        $classes = drupal_html_class("views-exposed-widget views-widget-filter-{$key}");

        // markup
        $prefix = format_string('<div id="@id" class="@classes">', array(
          '@id' => $id,
          '@classes' => $classes,
        ));

        // label
        if ($item['value']['#title']) {
          $prefix .= format_string('<label for="@for">!label</label>', array(
            '@for' => $id,
            '!label' => $item['value']['#title'],
          ));
        }

        // content
        $prefix .= '<div class="views-widget">';

        $item['#prefix'] = $prefix;
        $item['#suffix'] = '</div></div>';
      }

      // sort_by
      if ($key == 'sort_by') {
        $item['#prefix'] = '<div class="views-exposed-widget views-widget-sort-by">';
        $item['#suffix'] = '</div>';
      }

      // sort_order
      if ($key == 'sort_order') {
        $item['#prefix'] = '<div class="views-exposed-widget views-widget-sort-order">';
        $item['#suffix'] = '</div>';
      }

      // reset
      if ($key == 'reset') {
        $item['#prefix'] = '<div class="views-exposed-widget views-reset-button">';
        $item['#suffix'] = '</div>';
      }

      // submit
      if ($key == 'submit') {
        $item['#prefix'] = '<div class="views-exposed-widget views-submit-button">';
        $item['#suffix'] = '</div>';
      }

      array_walk($item, $callback, $data);
    }
  };
  
  $info_key = array_flip(views_exposed_form_usability_get_column($form['#info'], 'value'));
  
  array_walk($form, $filter, array(
    'info' => &$form['#info'],
    'info_key' => &$info_key,
    'callback' => $filter,
  ));
}
